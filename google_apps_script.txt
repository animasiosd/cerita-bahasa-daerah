/**
 * =================================================================
 * KONFIGURASI DAN PENGATURAN UTAMA UPDATE: 27-08-2025 19:48 WIB
 * =================================================================
 */

// Ganti dengan ID Google Spreadsheet Anda
const SPREADSHEET_ID = "160wtXsGBJXdEcaiwHduTE70SnkjL4lL4KVNUNL-ouCo"; 

// Konfigurasi untuk setiap sheet
const SHEETS = {
  USER_LIST: {
    NAME: 'user_list',
    HEADERS: ['user_id','email','user_name','first_login','last_login','login_count','birthday','age_range','minAge','age_range_category','gender','first_latitude','first_longitude','first_continent','first_country','first_country_code','first_state','first_county','first_city','first_municipality','first_town','first_village','first_suburb','first_road','first_postcode','first_display_name','first_timezone','last_latitude','last_longitude','last_continent','last_country','last_country_code','last_state','last_county','last_city','last_municipality','last_town','last_village','last_suburb','last_road','last_postcode','last_display_name','last_timezone']
  },
  USER_PER_PAGE: {
    NAME: 'user_per_page',
    HEADERS: ['timestamp','user_id','user_name','url_halaman','tipe_halaman','nama_bahasa','device_type','operating_system','browser_name']
  },
  USER_BEHAVIOR: {
    NAME: 'user_behavior',
    HEADERS: ['event_date','event_timestamp','user_id','user_name','event_name','event_details_1','event_details_2']
  },
  DOWNLOAD_INTERACTION: {
    NAME: 'download_page_interaction',
    HEADERS: ['timestamp','user_id','user_name','action_type','action_key','action_value','action_detail']
  },
  VIDEO_INTERACTION: {
    NAME: 'video_interaction',
    HEADERS: ['interaction_timestamp','user_id','user_name','birthday','age_range','minAge','age_range_category','gender','nama_bahasa','video_id','video_title','interaction_type','comment_id','video_watch_percentage','video_completed','latitude','longitude','continent','country','country_code','state','county','city','municipality','town','village','suburb','road','postcode','display_name','timezone']
  },
  PERFORMANCE_ERRORS: {
    NAME: 'client_performance_and_errors',
    HEADERS: ['timestamp','user_id','user_name','event_type','page_url','load_time_ms','error_message','browser_name']
  },
  USER_CATEGORY: { NAME: 'user_category' }
};


/**
 * =================================================================
 * FUNGSI INISIALISASI (JALANKAN SEKALI SAJA)
 * =================================================================
 */
function setupInitial() {
  const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
  for (const key in SHEETS) {
    if (SHEETS[key].HEADERS) {
      const sheet = ss.getSheetByName(SHEETS[key].NAME);
      if (sheet && sheet.getLastRow() === 0) {
        sheet.appendRow(SHEETS[key].HEADERS);
        sheet.getRange(1, 1, 1, SHEETS[key].HEADERS.length).setFontWeight('bold');
        sheet.setFrozenRows(1);
      }
    }
  }
}


/**
 * =================================================================
 * ENDPOINT WEB APP (FUNGSI UTAMA)
 * =================================================================
 */
function doPost(e) {
  try {
    const payload = JSON.parse(e.postData.contents);

    // ðŸ”¹ Tangani komentar jika ada
    if (payload.commentText && payload.videoId) {
      const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
      const sheet = ss.getSheetByName("comments");
      const newCommentId = Utilities.getUuid();

      sheet.appendRow([
        new Date(),
        newCommentId,
        payload.userId || "",
        payload.userName || "",
        payload.userPhotoUrl || "",
        payload.videoId || "",
        payload.videoTitle || "",
        payload.languagePage || "",
        payload.commentText || ""
      ]);

      return ContentService.createTextOutput(JSON.stringify({
        status: 'success',
        comment_id: newCommentId
      })).setMimeType(ContentService.MimeType.JSON);
    }

    const eventType = payload.eventType;
    if (!eventType) throw new Error("Properti 'eventType' tidak ditemukan di payload.");

    const lock = LockService.getScriptLock();
    lock.waitLock(15000);
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

    // Routing event berdasarkan tipe
    switch (eventType) {
      case 'USER_LOGIN_ACTIVITY':
        handleUserList(ss, payload.data);
        break;
      case 'PAGE_VIEW':
        handleGenericAppend(ss, SHEETS.USER_PER_PAGE.NAME, payload.data, SHEETS.USER_PER_PAGE.HEADERS);
        break;
      case 'USER_BEHAVIOR':
        handleGenericAppend(ss, SHEETS.USER_BEHAVIOR.NAME, payload.data, SHEETS.USER_BEHAVIOR.HEADERS);
        break;
      case 'DOWNLOAD_INTERACTION':
        handleGenericAppend(ss, SHEETS.DOWNLOAD_INTERACTION.NAME, payload.data, SHEETS.DOWNLOAD_INTERACTION.HEADERS);
        break;
      case 'VIDEO_INTERACTION':
        handleGenericAppend(ss, SHEETS.VIDEO_INTERACTION.NAME, payload.data, SHEETS.VIDEO_INTERACTION.HEADERS);
        break;
      case 'CLIENT_EVENT':
        handleGenericAppend(ss, SHEETS.PERFORMANCE_ERRORS.NAME, payload.data, SHEETS.PERFORMANCE_ERRORS.HEADERS);
        break;
      default:
        throw new Error(`eventType '${eventType}' tidak dikenal.`);
    }

    lock.releaseLock();
    return ContentService.createTextOutput(JSON.stringify({ status: 'success', event: eventType }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}


/**
 * =================================================================
 * FUNGSI PEMBANTU: USER_LIST
 * =================================================================
 */
function handleUserList(ss, data) {
  const sheet = ss.getSheetByName(SHEETS.USER_LIST.NAME);
  const uidColumn = 1;
  const lastRow = sheet.getLastRow();
  const dataValues = lastRow > 1 ? sheet.getRange(2, uidColumn, lastRow - 1, 1).getValues() : [];
  let userRowIndex = -1;

  for (let i = 0; i < dataValues.length; i++) {
    if (dataValues[i][0] == data.user_id) {
      userRowIndex = i + 2;
      break;
    }
  }

  const currentLocationData = [
    data.latitude || "", data.longitude || "", data.continent || "", data.country || "",
    data.country_code || "", data.state || "", data.county || "", data.city || "",
    data.municipality || "", data.town || "", data.village || "", data.suburb || "",
    data.road || "", data.postcode || "", data.display_name || "", data.timezone || ""
  ];

  if (userRowIndex > -1) {
    // PENGGUNA LAMA
    const now = new Date();
    const wibTime = Utilities.formatDate(now, "Asia/Jakarta", "yyyy-MM-dd HH:mm:ss");
    sheet.getRange(userRowIndex, 5).setValue(wibTime);
    const loginCountCell = sheet.getRange(userRowIndex, 6);
    loginCountCell.setValue((loginCountCell.getValue() || 0) + 1);

    const currentValues = sheet.getRange(userRowIndex, 7, 1, 5).getValues()[0];
    const updatedValues = [
      data.birthday ?? currentValues[0],
      data.age_range ?? currentValues[1],
      data.minAge ?? currentValues[2],
      data.minAge ? getAgeCategory(data.minAge) : currentValues[3],
      data.gender ?? currentValues[4]
    ];
    sheet.getRange(userRowIndex, 7, 1, 5).setValues([updatedValues]);

    sheet.getRange(userRowIndex, 29, 1, currentLocationData.length).setValues([currentLocationData]);

  } else {
    // PENGGUNA BARU
    const now = new Date();
    const wibTime = Utilities.formatDate(now, "Asia/Jakarta", "yyyy-MM-dd HH:mm:ss");
    const ageCategory = getAgeCategory(data.minAge);
    const newRow = [
      data.user_id || "",
      data.email || "",
      data.user_name || "",
      wibTime, // âœ… first_login WIB
      wibTime, // âœ… last_login WIB
      1,
      data.birthday || "",
      data.age_range || "",
      data.minAge || "",
      ageCategory,
      data.gender || "Tidak Diketahui",
      ...currentLocationData,
      ...currentLocationData
    ];
    sheet.appendRow(newRow);
  }
}


/**
 * =================================================================
 * FUNGSI GENERIK UNTUK APPEND DATA
 * =================================================================
 */
function handleGenericAppend(ss, sheetName, data, headers) {
  const sheet = ss.getSheetByName(sheetName);
  const newRow = headers.map(header => (data.hasOwnProperty(header) ? data[header] : ""));
  sheet.appendRow(newRow);
}


/**
 * =================================================================
 * FUNGSI KATEGORI USIA
 * =================================================================
 */
function getAgeCategory(minAge) {
  if (!minAge || isNaN(minAge)) return "Tidak Diketahui";
  if (minAge >= 60) return "Lansia";
  if (minAge >= 40) return "Dewasa Paruh Baya";
  if (minAge >= 20) return "Dewasa Muda";
  if (minAge >= 12) return "Remaja";
  if (minAge >= 5) return "Anak-anak";
  return "Di Bawah Umur";
}
